image list : docker image list 
make a requirements.text file : pip freeze > requirements.txt
build a docker insatnce : docker build -t <name> .
run docker insatnce : 
docker compose build
docker compose up
clear all cache : docker builder prune -f
remove all images : docker rmi -f $(docker images -a -q)
stop docker insatnce : docker-compose stop
view insatnce is running or not: docker ps 

# Stop all running containers
docker stop $(docker ps -q)

# Remove all containers
docker rm -f $(docker ps -aq)

# Remove all images
docker rmi -f $(docker images -aq)

# Remove all build cache
docker builder prune -f

# (Optional) Remove all unused data, including volumes
docker system prune -a --volumes -f
---------------------------------
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}
.env file
DB_NAME=
DB_USER=
DB_PASSWORD=
DB_HOST=127.0.0.1
DB_PORT=
SECRET_KEY=
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')


pip install mysqlclient
pip install python-dotenv
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py makemigrations Customer
python manage.py migrate
